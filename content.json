{"pages":[{"title":"About Me","text":"EducationShanghai Jiao Tong University SkillsPython, JavaScript, Solidity, Java, C/C++ Blockchain, Web &amp; Software development InternshipBlockchain full-stack developer@Intel ProjectsiDict-cmdcommand line version of iDict for macOs&amp;Windows&amp;Linux Configurable Color Theme iDict-weappA better English to Chinese Dictionary in Weapp. Autocorrection Tap &amp; Show Native &amp; Authoritative examples SnifferA Sniffer based on scapy and PyQt5. Colorful &amp; Responsive No packet loss under 100Mbps TCP Reassembly supported iReadingAn Effective English learning Android app. Tap &amp; Show at location Real time news feed Offline dictionary included","link":"/about/index.html"}],"posts":[{"title":"Introduction of iDict-weapp","text":"A better English to Chinese Dictionary in Weapp. Features Autocorrection Responsive Autocorrection based on the distance of keyboard using weighted Levenshtein Single tap Single tap whatever word you like in the English Definition part and Sentence part will give you the explanation of the Lemma) of the word. You can choose to long tap or click the &gt; one the top-right corner to see the detail if necessary. Native &amp; Authoritative examples All the sentence examples are selected from famous dictionaries for the best reference. OALD (Oxford Advanced Learner’s Dictionary) CALD (Cambridge Advanced Learner’s Dictionary) LDOCE (Longman Dictionary of Contemporary English) CLED (Collins Learner’s English-Chinese Dictionary) Acknowledgement ECDICT for providing database of over 3 million words","link":"/2018/11/03/An-Introduction-to-iDict-Weapp/"},{"title":"Try iDict in Command Line","text":"command line version of iDict for macOs&amp;Windows&amp;Linux 适用macOs, Windows(64位)和Linux的命令行版本iDict英语词典,包含330W词库以及来自权威词典的双语例句。 轻量级,包含所有依赖的可执行文件,下载即用。 同时推荐微信小程序版本，在移动端获取极佳体验 Install请去Release页面下载对应的可执行文件 Linux wget https://github.com/AntiSomnus/iDict-cmd/releases/download/[latest-release-number]/idict_linux &amp;&amp; chmod a+x idict_linux Make sure to change [latest-release-number] to the number of release, e.g 2.0 Or you can just go to Release page to download the latest version. add the location to the path ln -s /location/to/idict_linux /usr/local/bin/idict idict welcome idict welcome -d idict welcome -d 3 Windows Just go to Release page to download the latest version. add the location to the path idict welcome idict welcome -d idict welcome -d 3 macOs macOs上使用需要brew安装openssl wget https://github.com/AntiSomnus/iDict-cmd/releases/download/[latest-release-number]/idict_macos &amp;&amp; chmod a+x idict_macos Make sure to change [latest-release-number] to the number of release, e.g 2.0 Or you can just go to Release page to download the latest version. make sure you have openssl installed brew install openssl add the location to the path ln -s /location/to/idict_macos /usr/local/bin/idict idict welcome idict welcome -d idict welcome -d 3 Usageidict word [-d|--detail [max-sentences-per-dict] ]word the word you want to query 你想要查询的单词,默认不包含例句-d | --detail get the detailed info of the word 获取单词详细释义，包含例句 max-sentences-per-dict(default=2) 显示的例句数量，默认为2 Exampleidict welcomeidict welcome -didict welcome -d 1 Color (Beta in win64_python version)修改color.ini即可修改颜色 New python version will give you the flexibility to change color configuration. Just change the color.ini in the folder of win64_python Release The color table is belowBLACK = 30RED = 31GREEN = 32YELLOW = 33BLUE = 34MAGENTA = 35CYAN = 36WHITE = 37RESET = 39LIGHTBLACK = 90LIGHTRED = 91LIGHTGREEN = 92LIGHTYELLOW = 93LIGHTBLUE = 94LIGHTMAGENTA = 95LIGHTCYAN = 96LIGHTWHITE = 97 default color configuration is[COLOR]word_color = 91section_color = 92hint_color = 93text_color = 97source_color = 90 Sentences from news (Beta in win64_python version)可以获得来自国外权威新闻媒体对于该单词的用法，在win64_python版本中使用-n即可开启，如idict test -n或idict test -n -d New feature that provides sentences from news by the api of vocabulary.com Compile on your own Linux g++ -Os -s -m64 -std=c++14 idict_linux.cpp -o idict -Wl,-static -lssl -lcrypto -Wl,-Bdynamic -ldl if you have the error of undefined reference to 'pthread_getspecific', you might need to add -pthread g++ -Os -s -m64 -std=c++14 idict_linux.cpp -o idict -Wl,-static -lssl -lcrypto -Wl,-Bdynamic -ldl -pthread Windows g++ idict_win.cpp -o idict -Os -s -m64 -std=c++14 -static-libgcc -static-libstdc++ -Wl,-Bstatic,--whole-archive -lwinpthread -Wl,--no-whole-archive -Wl,-Bstatic -lssl -lcrypto -Wl,-Bdynamic -lws2_32 macOs In order to use it properly, you must install openssl from brew first. brew install openssl For compilers to find openssl you must set: export LD_LIBRARY_PATH=/usr/local/opt/openssl/lib:\"${LD_LIBRARY_PATH}\"export CPATH=/usr/local/opt/openssl/include:\"${CPATH}\" https://github.com/AntiSomnus/iDict-cmd.git cd iDict-cmd Compile g++ -Os -m64 -std=c++14 idict_linux.cpp -o idict -lssl -lcrypto","link":"/2018/11/03/Try-iDict-in-Command-Line/"},{"title":"Tutorial - Get Ready to Use IPFS Cluster","text":"IPFS has become one of the most popular ways to store your data in a decentralized way. This tutorial will demonstrate the basic usage of ipfs, ipfs-cluster and how to access it via axios in JavaScript. Perquisites Download ipfs,ipfs-cluster-service on all of your servers and ipfs-cluster-ctl on at least one of your servers on IPFS distributions. For me, I download them on all of my servers. Make them into PATH like ln * /usr/bin &amp;&amp; chmod a+x * make sure the following port is accessible on your server 8080 (ipfs get file) 9094 (ipfs cluster service RESTful API) 9096 (ipfs cluster service peer commuication) ConfigurationThe following steps should be done on all of your servers Init ipfs ipfs init (optional) Go to the .ipfs directory it generated and open config Change to &quot;Gateway&quot;: &quot;/ip4/0.0.0.0/tcp/8080&quot; so that we can get the file from http://ip:8080/hash Init ipfs-cluster ipfs-cluster-service init Go to the .ipfs-cluster directory it generated and open service.json Make sure every server has the same secret (optional) Go to the .ipfs directory it generated and open config Change to &quot;http_listen_multiaddress&quot; in restapi to &quot;/ip4/0.0.0.0/tcp/9094&quot; so that we can add&amp;pin the file into the whole cluster from http://ip:9094 Start DaemonThe following steps can be optimized to use superviser Start ipfs daemon on every server ipfs daemon Start ipfs-cluster-service daemon on first server ipfs-cluster-service daemon Start ipfs-cluster-service daemon on other servers by bootstrap ipfs-cluster-service daemon --bootstrap /ip4/[ip-of-first-server]/tcp/9096/ipfs/[cluster-service-id] cluster-service-id can be inferred from cluster.id from service.json or logs of ipfs-cluster-service daemon on first server. e.g ipfs-cluster-service daemon --bootstrap /ip4/12.34.56.78/tcp/9096/ipfs/QmVw41GTKr76Xw2zAgXn1ic98nZfYj1DPd7VJPku4q1oW9 Right now, they should be connected! Access cluster by axios add&amp;pin files on one of the server in the cluster POST [ip]:9094/add (request content-type must bemultipart/form-data ) get files from all of the server in the cluster GET [ip]:8080/ipfs/[CID] Here is the axios example in Vue to upload a binary file (Buffer) in one peer and access it from another in frontend. let buffer = Buffer.from[1,2,3]let bodyFormData = new FormData();const blob = new Blob([new Uint8Array(buffer)]);bodyFormData.set('file', blob);let that = this;this.$axios({ method: 'post', url: 'http://12.34.56.78:9094/add', data: bodyFormData, config: { headers: {'Content-Type': 'multipart/form-data'}, }}).then(response =&gt; { const cid = response.data.cid; that.$axios.get(`http://23.45.67.89/ipfs/${cid}`, { responseType: 'arraybuffer' }).then(x =&gt; { const downloaded = Buffer.from(x.data); console.log(downloaded) })})","link":"/2019/03/03/Get-Ready-to-Use-IPFS-Cluster/"},{"title":"Tutorial - Using Protobuf in Flutter","text":"Recently, I have working on Futter project. However, I have found it quite difficult to install the Dart protobuf plugin on Linux. Here is my tutorial for you to save your time. Install Dart Following the instruction here to install Dart Dart SDK For me, I just download the deb file and install it. sudo dpkg -i dart_2.1.0-1_amd64.deb After that we can use dart in terminal, but we cannot find pub . The reason is beacuse it is located in usr/lib/dart/bin Therefore, we’d better change the PATH permanently. Change the PATH permanently for pub gedit ~/.profile Then add the following to the end of .profile export PATH=$PATH:/usr/lib/dart/bin Logout and login again to let the modification take effect. Type pub in terminal, we will see it works. Install protoc The simplest way is to use to precompiled protoc binary and put it into PATH Protobuf Release For me, I download the protoc-3.6.1-osx-x86_64.zip. Unzip it, and put protoc binary to /usr/bin Then, we type protoc in terminal, we will see it works. Install Dart protoc_plugin In the terminal, type pub global activate protoc_plugin Right now, I’m in China. For reasons known to all, I have to use the mirror export PUB_HOSTED_URL=https://pub.flutter-io.cn However, it is installed in $HOME/.pub-cache/bin. We’d better make it into PATH again. Using the same way in ~/.profile Now, the last line looks like export PATH=$PATH:/usr/lib/dart/bin:$HOME/.pub-cache/bin You need to logout and login to again to take effect. Compile from .proto file Finally, we can compile .proto file to .dart file. For me, I just go to the directory containing the .proto file, using the command below, and it will generate the .dart file(s) you need. You can copy them to your flutter project protc --dart_out=. ./YourFile.proto Install protobuf runtime library Don’t forget to install the runtime library by adding protobuf: ^0.11.0 in your dependency part of pubspec.yaml That’s it! Hope it will save your time to build your flutter project with awesome protobuf!","link":"/2019/01/12/Using-Protobuf-In-Flutter/"}],"tags":[{"name":"iDict","slug":"iDict","link":"/tags/iDict/"},{"name":"Protobuf","slug":"Protobuf","link":"/tags/Protobuf/"},{"name":"IPFS","slug":"IPFS","link":"/tags/IPFS/"},{"name":"Decentralized","slug":"Decentralized","link":"/tags/Decentralized/"}],"categories":[{"name":"iDict","slug":"iDict","link":"/categories/iDict/"},{"name":"Flutter","slug":"Flutter","link":"/categories/Flutter/"},{"name":"Weapp","slug":"iDict/Weapp","link":"/categories/iDict/Weapp/"},{"name":"cmd","slug":"iDict/cmd","link":"/categories/iDict/cmd/"},{"name":"Protobuf","slug":"Flutter/Protobuf","link":"/categories/Flutter/Protobuf/"},{"name":"IPFS","slug":"IPFS","link":"/categories/IPFS/"}]}